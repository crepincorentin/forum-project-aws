name: CI-CD

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy infrastructure'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: eu-central-1
  DOCKER_USERNAME: corentin123

jobs:
  validate:
    name: Validation s√©curit√© et qualit√©
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        working-directory: ./api
        run: npm install

      - name: Lint
        working-directory: ./api
        run: npm run lint

      - name: Format check
        working-directory: ./api
        run: npm run format

      - name: SAST (npm audit)
        working-directory: ./api
        run: npm audit --audit-level=moderate

      - name: Gitleaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
            GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}


  test:
    name: Tests API
    runs-on: ubuntu-latest
    needs: validate
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: forum
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install deps
        working-directory: ./api
        run: npm install
      - name: Run tests
        working-directory: ./api
        run: npm test
        env:
          DB_HOST: localhost
          DB_USER: postgres
          DB_PASSWORD: postgres123
          DB_NAME: forum
          DB_PORT: 5432

  # √âtape 3: Construction des images Docker
  build:
    name: üê≥ Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      short_sha: ${{ steps.vars.outputs.short_sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get short SHA
        id: vars
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/forum-frontend:${{ steps.vars.outputs.short_sha }}
            ${{ env.DOCKER_USERNAME }}/forum-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push API
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/forum-api:${{ steps.vars.outputs.short_sha }}
            ${{ env.DOCKER_USERNAME }}/forum-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # √âtape 4: D√©ploiement avec Terraform
  deploy:
    name: üöÄ Deploy to AWS
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !inputs.destroy
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Configure AWS CLI for import
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Import existing resources (if needed)
        working-directory: terraform
        continue-on-error: true
        run: |
          # Essayer d'importer le security group s'il existe
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=forum-sg" --query "SecurityGroups[0].GroupId" --output text 2>/dev/null || echo "")
          if [ "$SG_ID" != "" ] && [ "$SG_ID" != "None" ]; then
            echo "Security group forum-sg trouv√©: $SG_ID"
            terraform import aws_security_group.forum_sg $SG_ID || echo "Import √©chou√© ou d√©j√† import√©"
          fi

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -out=tfplan -var="docker_tag=${{ needs.build.outputs.short_sha }}"

      - name: Terraform Apply
        id: terraform
        working-directory: terraform
        run: |
          terraform apply -auto-approve tfplan
          echo "front_public_ip=$(terraform output -raw front_public_ip)" >> $GITHUB_OUTPUT
          echo "api_public_ip=$(terraform output -raw api_public_ip)" >> $GITHUB_OUTPUT

      - name: Configure SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > ~/.ssh/${{ secrets.AWS_KEY_NAME }}.pem
          chmod 600 ~/.ssh/${{ secrets.AWS_KEY_NAME }}.pem

      - name: Post-Configuration (Dynamic URLs)
        working-directory: terraform
        run: |
          chmod +x configure.sh
          ./configure.sh
        env:
          KEY_NAME: ${{ secrets.AWS_KEY_NAME }}
          DOCKER_TAG: ${{ needs.build.outputs.short_sha }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      - name: Deployment Summary
        run: |
          echo "‚úÖ Deployment successful!"
          echo "Frontend: http://${{ steps.terraform.outputs.front_public_ip }}"
          echo "API: http://${{ steps.terraform.outputs.api_public_ip }}:3000"

  # √âtape 5: Destruction (manuel via workflow_dispatch)
  destroy:
    name: üí• Destroy Infrastructure
    runs-on: ubuntu-latest
    if: github.event.inputs.destroy == 'true'
    environment:
      name: production-destroy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Destroy
        working-directory: terraform
        run: terraform destroy -auto-approve

      - name: Confirm destruction
        run: echo "üóëÔ∏è Infrastructure destroyed successfully!"
